#!/usr/bin/python
# -*- coding: utf-8 -*-
from os import stat
from aiogram import Bot, types
from aiogram.types import message
from variables import *
from models import *
from sqlalchemy.ext.declarative import declarative_base
from aiogram.dispatcher import Dispatcher
from config import TOKEN
from aiogram.utils import executor
from aiogram.types import chat, message_entity, reply_keyboard, InputMediaPhoto
from aiogram.types.message import Message
from random import choice, shuffle, random
from scripts import *
from json import *
from keyboards import *
import asyncio
import os
import aiohttp
import time
import datetime
from config import *
from sqlalchemy import create_engine
from sqlalchemy.orm import Session, sessionmaker




states = {}


async def get_event_type(event):
    pass

async def get_user_state_from_inline_commands(message):
    print(message)
    if states.get(message["from"]["id"], False): 
        return states[message["from"]['id']]
    else: 
        MainStateUser = MainState(message)
        states[message["from"]["id"]] = MainStateUser
        return MainStateUser 

async def get_user_state_from_text_commands(message):
    if states.get(message["from"]["id"], False): 
        return states[message["from"]['id']]
    else: 
        MainStateUser = MainState(message)
        states[message["from"]["id"]] = MainStateUser
        return MainStateUser 


class OnboardingState: 
    def __init__(self, message, last_sended_message): 
        self.inline_commands = {"next_onboarding_step": self.set_next_onboarding_step, "prev_onboarding_step": self.set_prev_onboarding_step}
        self.onboarding_step = 1
        self.last_sended_message = last_sended_message


    async def inline_commands_handler(self, message): 
        if self.inline_commands.get(message["data"], False): 
            await self.inline_commands[message["data"]](message)
        else: 
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")


class TestState: 
    def __init__(self, sended_story_message, test_number): 
        self.sended_story_message = sended_story_message 
        self.test_number = test_number
        self.current_question = 0
        self.right_answers_count = 0 
        self.wrong_asnwers_count = 0
        self.inline_commands = {"next_btn": self.set_next_test_step}


    async def inline_commands_handler(self, message): 
        if self.inline_commands.get(message["data"], False): 
            await self.inline_commands[message["data"]](message)
        else: 
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞")


    async def get_test_question(self, message): 
        with open("stories.json", "r", errors="ignore", encoding="utf-8") as file: 
            data = load(file)
        return data[self.test_number]["questions"]

    async def get_test_answers(self, message): 
        with open("stories.json", "r", errors="ignore", encoding="utf-8") as file: 
            data = load(file)
        return data[self.test_number]["answers"]

    async def send_test_step(self, message):
        if 0 <= self.current_question <= 4:
            questions = await self.get_test_question(message)
            question = questions[self.current_question]
            await bot.edit_message_text(
                question,
                chat_id=self.sended_story_message["chat"]["id"],
                message_id=self.sended_story_message["message_id"]
            )
            answers = await self.get_test_answers(message)
            answers = answers[self.current_question]
            answers = sorted(answers, key=lambda el: random())
            keyb = InlineKeyboardMarkup()
            for answer in answers: 
                thatOneAnswer = InlineKeyboardButton(str(answer), callback_data="next_btn")
                keyb.add(thatOneAnswer)
            await bot.edit_message_reply_markup(chat_id=self.sended_story_message["chat"]["id"], message_id=self.sended_story_message["message_id"], reply_markup=keyb)
        elif self.current_question == 5:
            photo = open('map_check.png', 'rb')
            await bot.send_photo(chat_id=self.sended_story_message["chat"]["id"], photo=photo)
            await bot.edit_message_text("‚úÖ –°–æ–±—Ä–∞–Ω–æ [1/5] –∫–∞—Ä—Ç–æ—á–µ–∫\n\n–¢—ã –æ—Ç–≤–µ—Ç–∏–ª –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ 3 –∏–∑ 5 –≤–æ–ø—Ä–æ—Å–æ–≤! –°–∫–æ—Ä–µ–µ –∏–¥–∏ –∏—Å–∫–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é –∫–∞—Ä—Ç–æ—á—É!", chat_id=self.sended_story_message["chat"]["id"], message_id=self.sended_story_message["message_id"])


    async def set_next_test_step(self, message):
        if self.current_question < 5:
            self.current_question += 1
            await self.send_test_step(message)

    async def exit_test_state(message):
        MainStateUser = MainState(message)
        states[message["chat_id"]] = MainStateUser
        await bot.send_message(
            message["chat"]["id"],
            "‚úÖ –û—Ç–ª–∏—á–Ω–æ!\n\n–ú—ã —Ä–∞—Å—Å–∫–∞–∑–∞–ª–∏ —Ç–µ–±–µ –æ–± –≤—Å—ë–º, —á—Ç–æ –∑–Ω–∞–µ–º –æ –±–æ—Ç–µ, –∞ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –ø—Ä–æ–ø—É—Å—Ç–∏–ª–∏ ‚Äî –Ω–µ –±–µ–¥–∞! –í—Å–µ–≥–¥–∞ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–µ–µ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å —á—Ç–æ-—Ç–æ —Å–∞–º–æ–º—É, –±–µ–∑ –ø–æ—Å—Ç–æ—Ä–æ–Ω–Ω–µ–π –ø–æ–º–æ—â–∏ üòâ"
        )


class MainState:
    def __init__(self, message):
        self.id = message["from"]["id"]
        self.username = message["from"]["username"]
        self.text_commands = {"/start": self.start}
        self.inline_commands = {"accept_onboarding_request": self.accept_onboarding_request, "dicline_onboarding_request": self.dicline_onboarding_request, "answer_questions": self.answer_questions}

    async def answer_questions(self, message):
        ts = TestState(self.sended_story_message, self.story_number)
        states[message["from"]["id"]] = ts
        await ts.send_test_step(message)

    async def start(self, message): 
        await message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\nEnergyQuest ‚Äì —ç—Ç–æ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –∫–≤–µ—Å—Ç-–∏–≥—Ä–∞, –≤ –∫–æ—Ç–æ—Ä–æ–π —Ç–µ–±–µ –Ω—É–∂–Ω–æ –∏—Å–∫–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫–∏ –≤–Ω—É—Ç—Ä–∏ –∫–æ—Ä–ø—É—Å–æ–≤ –ö–ì–≠–£\n\n–ù–∞–π–¥—è –∫–∞—Ä—Ç–æ—á–∫—É, —Ç—ã –º–æ–∂–µ—à—å –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ —Ä–∞—Å—Å–∫–∞–∑—ã –æ–± —ç–Ω–µ—Ä–≥–µ—Ç–∏–∫–µ –≤ –†–æ—Å—Å–∏–∏, –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ—Å–ª–µ —Ä–∞—Å—Å–∫–∞–∑–∞ –∏ –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–ª—ã –æ—Ç —Å–≤–æ–µ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –≤ –ë–†–°!", )
        photo = open('map.png', 'rb')
        await bot.send_photo(chat_id=message["chat"]["id"], photo=photo)
        await asyncio.sleep(1)
        await self.send_onboarding_request(message)

    async def accept_onboarding_request(self, message): 
        OnboardingStateUser = OnboardingState(message, self.onboarding_request_message)
        states[message["from"]["id"]] = OnboardingStateUser
        await OnboardingStateUser.send_onboarding_step(message)

    async def dicline_onboarding_request(self, message): 
        await bot.delete_message(self.onboarding_request_message["chat"]["id"], self.onboarding_request_message["message_id"])
        await bot.send_message(
            message["from"]["id"],
            "üò§ –•–æ—Ä–æ—à–æ, –Ω–æ –µ—Å–ª–∏ —É —Ç–µ–±—è –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –ø–æ —Ä–∞–±–æ—Ç–µ —Å –±–æ—Ç–æ–º, –º–æ–∂–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –ø–æ –∫–æ–º–∞–Ω–¥–µ /help.",
        )
        mainStateUser = MainState(message)
        states[message["from"]["id"]] = mainStateUser

    async def send_story(self, message): 
        story_number = message["text"].split()[1]
        with open("stories.json", "r", encoding="utf-8", errors="ignore") as file: 
            data = json.load(file)
        self.story_number = story_number
        text = data[story_number]["text"]
        self.sended_story_message = await message.answer(text, reply_markup=answer_questions_keyboard)
        print(self.sended_story_message, "–∑–¥–µ—Å—å")

    async def send_onboarding_request(self, message): 
        self.onboarding_request_message = await message.answer("–•–æ—á–µ—à—å –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ? –Ø –æ–±—ä—è—Å–Ω—é —Ç–µ–±–µ –∫–∞–∫ –∏–≥—Ä–∞—Ç—å.", reply_markup=onboarding_request_keyboard)

    async def text_commands_handler(self, message):
        try:
            if len(message["text"].split()) == 1 and message["text"] == "/start": 
                await self.start(message)
            elif len(message["text"].split()) == 2 and  message["text"].split()[0] == "/start": 
                await self.send_story(message)
            else: 
                await self.text_commands[message["text"]](message)
        except KeyError as error:
            await message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–≤–µ–¥–∏ /exit, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω."
            )

    async def inline_commands_handler(self, message): 
        try:
            await self.inline_commands[message["data"]](message)
        except KeyError as error:
            await message.answer(
                f"–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞, –≤–≤–µ–¥–∏ /exit, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ –Ω–∞—á–∞–ª—å–Ω—ã–π —ç–∫—Ä–∞–Ω."
            )

    @staticmethod
    async def check_answer(message):
        session = Session()
        customer = (
            session.query(Customer)
            .filter(Customer.id == message["message"]["from"]["id"])
            .first()
        )
        card = session.query(Card).filter(Card.id == Customer.current_word_id).first()
        if card:
            if card.correct_answer == message["data"].split("_")[2]:
                await message.answer(
                    f"üòî –ü—Ä–∞–≤–∏–ª—å–Ω–æ! {card.text} –Ω–∞ —Ç–∞—Ç–∞—Ä—Å–∫–æ–º —è–∑—ã–∫–µ –±—É–¥–µ—Ç {card.correct_answer}"
                )
                await CardsGameState.send_card(message, is_first=False)
            else:
                await message.answer(f"üòî –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ, –ø–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑!")




bot = Bot(token=TOKEN)
dp = Dispatcher(bot)


@dp.message_handler()
async def text_commands_handler(message):
    print(states)
    user_state = await get_user_state_from_text_commands(message)
    await states[message["from"]["id"]].text_commands_handler(message)


@dp.callback_query_handler()
async def inline_commands_handler(message):
    print(states)
    user_state = await get_user_state_from_inline_commands(message)
    await states[message["from"]["id"]].inline_commands_handler(message)


@dp.message_handler(content_types=["contact"])
async def get_contact(message):
    user_state = await get_user_state_from_text_commands(message)
    await states[user_state].auth_with_phone(message)


onboarding_steps = {
    1: "–í–Ω—É—Ç—Ä–∏ –ö–ì–≠–£ –º—ã –æ—Å—Ç–∞–≤–∏–ª–∏ –∫–∞—Ä—Ç–æ—á–∫–∏ –≤ –≤–∏–¥–µ QR-–∫–æ–¥–æ–≤, –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–≤ –∫–æ—Ç–æ—Ä—ã–µ —Ç—ã –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ Telegram - –±–æ—Ç –∏ –ø–æ–ª—É—á–∏—Ç—å",
    2: "*[1/3]* –ü–µ—Ä–≤—ã–º –¥–µ–ª–æ–º —Å—Ç–æ–∏—Ç –∏–∑—É—á–∞—Ç—å —Ç–µ–æ—Ä–∏—é, –∑–∞ –∫–∞–∂–¥—ã–π –ø—Ä–æ–π–¥–µ–Ω–Ω—ã–π —à–∞–≥ —Ç–µ–æ—Ä–∏–∏ —Ç—ã –ø–æ–ª—É—á–∞–µ—à—å –æ—á–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ—Ç–æ–º –æ–±–º–µ–Ω–∏–≤–∞—é—Ç—Å—è –Ω–∞ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∏ –±–æ–Ω—É—Å—ã! 1 —à–∞–≥ = 1 –æ—á–∫–æ.\n\n–ö—Ä–æ–º–µ —Ç–æ–≥–æ, –ø–æ—Å–ª–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö —à–∞–≥–æ–≤ —Ç—ã –ø–æ–ª—É—á–∏—à—å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏—è, –≤–µ—Ä–Ω–æ —Ä–µ—à–µ–Ω–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ = 5 –æ—á–∫–æ–≤.",
    3: "*[2/3]* –¢–µ–æ—Ä–∏—è —É–∂–µ –Ω–∞–¥–æ–µ–ª–∞? –¢–æ–≥–¥–∞ —Å—ã–≥—Ä–∞–π –≤ –∏–≥—Ä—ã –≤ –æ–¥–∏–Ω–æ—á–∫—É –∏–ª–∏ –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏.\n\n–ß—Ç–æ–±—ã –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –¥—Ä—É–≥–∞ –≤ –∏–≥—Ä—É, –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç —Å –¥—Ä—É–≥–æ–º @tatrikabot, –≤—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏ –Ω–∞—á–∏–Ω–∞–π –∏–≥—Ä–∞—Ç—å!",
    4: "*[3/3]* –ê —á—Ç–æ –¥–µ–ª–∞—Ç—å, –µ—Å–ª–∏ —É –º–µ–Ω—è –≤–æ–∑–Ω–∏–∫ –≤–æ–ø—Ä–æ—Å –ø–æ —É—á–µ–±–Ω—ã–º –º–∞—Ç–µ—Ä–∏–∞–ª–∞–º –∏–ª–∏ –∏–≥—Ä–∞–º?\n\n–°–º–µ–ª–æ –∑–∞–¥–∞–≤–∞–π –∏—Ö —Å–≤–æ–µ–º—É –Ω–∞—Å—Ç–∞–≤–Ω–∏–∫—É —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å!",
}


test_steps = {
    1: ["–≠–ª–µ–∫—Ç—Ä–∏—á–µ—Å–∫–∏–µ —Ç—Ä–∞–Ω—Å—Ñ–æ—Ä–º–∞—Ç–æ—Ä—ã", "6 –≤–æ–ø—Ä–æ—Å–æ–≤", "–£—Ä–æ–≤–µ–Ω—å: –ª–µ–≥–∫–æ", "–ù–∞–≥—Ä–∞–¥–∞: –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–≤–æ–¥"], 
    2: ["–≠–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–∏–µ –º–∞—à–∏–Ω—ã", "10 –≤–æ–ø—Ä–æ—Å–æ–≤", "–£—Ä–æ–≤–µ–Ω—å: —Å—Ä–µ–¥–Ω–µ", "–ù–∞–≥—Ä–∞–¥–∞: —Å—Ä–µ–¥–Ω–∏–π –∑–∞–≤–æ–¥"], 
    3: ["–≠–Ω–µ—Ä–≥–æ—Å–Ω–∞–±–∂–µ–Ω–∏–µ", "5 –≤–æ–ø—Ä–æ—Å–æ–≤", "–£—Ä–æ–≤–µ–Ω—å: —Å—Ä–µ–¥–Ω–µ", "–ù–∞–≥—Ä–∞–¥–∞: –±–æ–ª—å—à–æ–π –∑–∞–≤–æ–¥"]
}

suitable_question_length = 140


if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
